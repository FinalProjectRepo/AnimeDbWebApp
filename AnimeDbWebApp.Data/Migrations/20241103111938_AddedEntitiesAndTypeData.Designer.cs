// <auto-generated />
using System;
using AnimeDbWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeDbWebApp.Data.Migrations
{
    [DbContext(typeof(AnimeDbContext))]
    [Migration("20241103111938_AddedEntitiesAndTypeData")]
    partial class AddedEntitiesAndTypeData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeDbWebApp.Models.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier that equals mal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasMaxLength(3999)
                        .HasColumnType("nvarchar(3999)")
                        .HasComment("Short description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Duration of episode");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME2")
                        .HasComment("Last episode aired date");

                    b.Property<int>("Episodes")
                        .HasColumnType("int")
                        .HasComment("Number of episodes");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Anime poster url");

                    b.Property<int?>("Rank")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Anime rank");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Age restriction for anime");

                    b.Property<decimal>("Score")
                        .HasColumnType("DECIMAL(4,2)")
                        .HasComment("Populairty/liked score of anime");

                    b.Property<int>("Season")
                        .HasColumnType("int")
                        .HasComment("Yearly anime season that anime aired");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Source for creating the anime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME2")
                        .HasComment("Airing start date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Airing status");

                    b.Property<string>("Sypnosis")
                        .IsRequired()
                        .HasMaxLength(3999)
                        .HasColumnType("nvarchar(3999)")
                        .HasComment("Short description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title");

                    b.Property<string>("TitleEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title in english translated");

                    b.Property<string>("TitleJapanese")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title in japanese characters");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Anime trailer url");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasComment("Type of anime(tv series, movie, etc.)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Url link to mal site");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeGenre", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of genre");

                    b.HasKey("AnimeId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AnimesGenres");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeLicensor", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("LicensorId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of licensor(producer)");

                    b.HasKey("AnimeId", "LicensorId");

                    b.ToTable("AnimesLicensors");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeManga", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("MangaId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.HasKey("AnimeId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("AnimesMangas");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeProducer", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of producer");

                    b.HasKey("AnimeId", "ProducerId");

                    b.HasIndex("ProducerId");

                    b.ToTable("AnimesProducers");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeRelation", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("RelationId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime that have relation to animeId");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of relation that animes have");

                    b.HasKey("AnimeId", "RelationId");

                    b.HasIndex("RelationId");

                    b.ToTable("AnimesRelations");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeStudio", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of anime");

                    b.Property<int>("StudioId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of studio(producer)");

                    b.HasKey("AnimeId", "StudioId");

                    b.HasIndex("StudioId");

                    b.ToTable("AnimesStudios");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier that equals mal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(3999)
                        .HasColumnType("nvarchar(3999)")
                        .HasComment("Aditional information about person");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("DATETIME2")
                        .HasComment("Date of birth");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title in japanese characters");

                    b.Property<string>("GivenName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title in english translated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Anime title");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Person poster url");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Url link to mal site");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Person website");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AuthorManga", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of author");

                    b.Property<int>("MangaId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of manga");

                    b.HasKey("AuthorId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("AuthorManga");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.GenreForAnime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Genre name");

                    b.HasKey("Id");

                    b.ToTable("GenresForAnimes");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.GenreForManga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Genre name");

                    b.HasKey("Id");

                    b.ToTable("GenresForMangas");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Manga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier that equals mal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Short description");

                    b.Property<int?>("Chapters")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Number of chapters");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("DATETIME2")
                        .HasComment("Date manga ended publishing");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Manga poster url");

                    b.Property<int?>("Rank")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Manga rank");

                    b.Property<decimal>("Score")
                        .HasColumnType("DECIMAL(4,2)")
                        .HasComment("Manga score");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("DATETIME2")
                        .HasComment("Date manga started publishing");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Airing status");

                    b.Property<string>("Sypnosis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Short description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Manga title");

                    b.Property<string>("TitleEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Manga title in english translated");

                    b.Property<string>("TitleJapanese")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Manga title in japanese characters");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasComment("Type of anime(tv series, movie, etc.)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Url link to mal site");

                    b.Property<int?>("Volumes")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Number of volumes, chapters combined in");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.MangaGenre", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of manga");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of genre");

                    b.HasKey("MangaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MangasGenres");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.MangaRelation", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of manga");

                    b.Property<int>("RelationId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of manga that have relation to mangaId");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of relation that mangas have");

                    b.HasKey("MangaId", "RelationId");

                    b.HasIndex("RelationId");

                    b.ToTable("MangasRelations");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasMaxLength(3999)
                        .HasColumnType("nvarchar(3999)")
                        .HasComment("Information about producer");

                    b.Property<DateTime>("Established")
                        .HasColumnType("DATETIME2")
                        .HasComment("Date the studio is established");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Anime poster url");

                    b.Property<string>("JpName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Japanese name of the studio");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("English name of the studio");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Url link to mal site of producer");

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type name");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doujinshi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Light Novel"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Manga"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Manhwa"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Movie"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ONA"
                        },
                        new
                        {
                            Id = 10,
                            Name = "One-shot"
                        },
                        new
                        {
                            Id = 11,
                            Name = "OVA"
                        },
                        new
                        {
                            Id = 12,
                            Name = "PV"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Special"
                        },
                        new
                        {
                            Id = 14,
                            Name = "TV"
                        },
                        new
                        {
                            Id = 15,
                            Name = "TV Special"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Anime", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Type", "Type")
                        .WithMany("Animes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeGenre", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.GenreForAnime", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeLicensor", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("AnimesLicensors")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Producer", "Licensor")
                        .WithMany("AnimesLicensors")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Licensor");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeManga", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("Adaptations")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Manga", "Manga")
                        .WithMany("Adaptations")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeProducer", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("AnimesProducers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Producer", "Producer")
                        .WithMany("AnimesProducers")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeRelation", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("AnimesRelations")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Anime", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AnimeStudio", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Anime", "Anime")
                        .WithMany("AnimesStudios")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Producer", "Studio")
                        .WithMany("AnimesStudios")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.AuthorManga", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Author", "Author")
                        .WithMany("AuthorsMangas")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Manga", "Manga")
                        .WithMany("AuthorsMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Manga", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Type", "Type")
                        .WithMany("Mangas")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.MangaGenre", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.GenreForManga", "Genre")
                        .WithMany("Mangas")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Manga", "Manga")
                        .WithMany("Genres")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.MangaRelation", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.Manga", "Manga")
                        .WithMany("MangaRalations")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.Manga", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeDbWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AnimeDbWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Anime", b =>
                {
                    b.Navigation("Adaptations");

                    b.Navigation("AnimesLicensors");

                    b.Navigation("AnimesProducers");

                    b.Navigation("AnimesRelations");

                    b.Navigation("AnimesStudios");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Author", b =>
                {
                    b.Navigation("AuthorsMangas");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.GenreForAnime", b =>
                {
                    b.Navigation("Animes");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.GenreForManga", b =>
                {
                    b.Navigation("Mangas");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Manga", b =>
                {
                    b.Navigation("Adaptations");

                    b.Navigation("AuthorsMangas");

                    b.Navigation("Genres");

                    b.Navigation("MangaRalations");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Producer", b =>
                {
                    b.Navigation("AnimesLicensors");

                    b.Navigation("AnimesProducers");

                    b.Navigation("AnimesStudios");
                });

            modelBuilder.Entity("AnimeDbWebApp.Models.Type", b =>
                {
                    b.Navigation("Animes");

                    b.Navigation("Mangas");
                });
#pragma warning restore 612, 618
        }
    }
}
